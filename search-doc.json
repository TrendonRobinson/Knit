[{"title":"KnitClient","type":0,"sectionRef":"#","url":"api/KnitClient","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"KnitClient","url":"api/KnitClient#types","content":" "},{"title":"Middleware​","type":1,"pageTitle":"KnitClient","url":"api/KnitClient#Middleware","content":"&lt;/&gt; interface Middleware { Inbound: ClientMiddleware? Outbound: ClientMiddleware? }   "},{"title":"ClientMiddlewareFn​","type":1,"pageTitle":"KnitClient","url":"api/KnitClient#ClientMiddlewareFn","content":"&lt;/&gt; type ClientMiddlewareFn = (args: {any}) → ( shouldContinue: boolean, ...: any ) For more info, see ClientComm documentation.  "},{"title":"ClientMiddleware​","type":1,"pageTitle":"KnitClient","url":"api/KnitClient#ClientMiddleware","content":"&lt;/&gt; type ClientMiddleware = {ClientMiddlewareFn} An array of client middleware functions.  "},{"title":"PerServiceMiddleware​","type":1,"pageTitle":"KnitClient","url":"api/KnitClient#PerServiceMiddleware","content":"&lt;/&gt; type PerServiceMiddleware = {[string]: Middleware}   "},{"title":"ControllerDef​","type":1,"pageTitle":"KnitClient","url":"api/KnitClient#ControllerDef","content":"&lt;/&gt; interface ControllerDef { Name: string [any]: any } Used to define a controller when creating it in CreateController.  "},{"title":"Controller​","type":1,"pageTitle":"KnitClient","url":"api/KnitClient#Controller","content":"&lt;/&gt; interface Controller { Name: string [any]: any }   "},{"title":"KnitOptions​","type":1,"pageTitle":"KnitClient","url":"api/KnitClient#KnitOptions","content":"&lt;/&gt; interface KnitOptions { ServicePromises: boolean? Middleware: Middleware? PerServiceMiddleware: PerServiceMiddleware? } ServicePromises defaults to true and indicates if service methods use promises. Each service will go through the defined middleware, unless the service has middleware defined in PerServiceMiddleware.  "},{"title":"Properties​","type":1,"pageTitle":"KnitClient","url":"api/KnitClient#properties","content":" "},{"title":"Player​","type":1,"pageTitle":"KnitClient","url":"api/KnitClient#Player","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; KnitClient.Player: Player  Reference to the LocalPlayer.  "},{"title":"Util​","type":1,"pageTitle":"KnitClient","url":"api/KnitClient#Util","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; KnitClient.Util: Folder  References the Util folder. Should only be accessed when using Knit as a standalone module. If using Knit from Wally, modules should just be pulled in via Wally instead of relying on Knit's Util folder, as this folder only contains what is necessary for Knit to run in Wally mode. "},{"title":"Functions​","type":1,"pageTitle":"KnitClient","url":"api/KnitClient#functions","content":" "},{"title":"CreateController​","type":1,"pageTitle":"KnitClient","url":"api/KnitClient#CreateController","content":"&lt;/&gt; KnitClient.CreateController(controllerDef: ControllerDef) → Controller Creates a new controller. caution Controllers must be created before calling Knit.Start(). -- Create a controller local MyController = Knit.CreateController { Name = &quot;MyController&quot;, } function MyController:KnitStart() print(&quot;MyController started&quot;) end function MyController:KnitInit() print(&quot;MyController initialized&quot;) end   "},{"title":"AddControllers​","type":1,"pageTitle":"KnitClient","url":"api/KnitClient#AddControllers","content":"&lt;/&gt; KnitClient.AddControllers(parent: Instance ) → {Controller} Requires all the modules that are children of the given parent. This is an easy way to quickly load all controllers that might be in a folder. Knit.AddControllers(somewhere.Controllers)   "},{"title":"AddControllersDeep​","type":1,"pageTitle":"KnitClient","url":"api/KnitClient#AddControllersDeep","content":"&lt;/&gt; KnitClient.AddControllersDeep(parent: Instance ) → {Controller} Requires all the modules that are descendants of the given parent.  "},{"title":"GetService​","type":1,"pageTitle":"KnitClient","url":"api/KnitClient#GetService","content":"&lt;/&gt; KnitClient.GetService(serviceName: string) → Service "},{"title":"Types","type":1,"pageTitle":"KnitClient","url":"api/KnitClient##","content":""},{"title":"​","type":1,"pageTitle":"KnitClient","url":"api/KnitClient#Service","content":"interface Service { [any]: any }  Returns a Service object which is a reflection of the remote objects within the Client table of the given service. Throws an error if the service is not found. If a service's Client table contains RemoteSignals and/or RemoteProperties, these values are reflected asClientRemoteSignals and ClientRemoteProperties. -- Server-side service creation: local MyService = Knit.CreateService { Name = &quot;MyService&quot;, Client = { MySignal = Knit.CreateSignal(), MyProperty = Knit.CreateProperty(&quot;Hello&quot;), }, } function MyService:AddOne(player, number) return number + 1 end ------------------------------------------------- -- Client-side service reflection: local MyService = Knit.GetService(&quot;MyService&quot;) -- Call a method: local num = MyService:AddOne(5) --&gt; 6 -- Fire a signal to the server: MyService.MySignal:Fire(&quot;Hello&quot;) -- Listen for signals from the server: MyService.MySignal:Connect(function(message) print(message) end) -- Observe the initial value and changes to properties: MyService.MyProperty:Observe(function(value) print(value) end) caution Services are only exposed to the client if the service has remote-based content in the Client table. If not, the service will not be visible to the client. KnitClient.GetService will only work on services that expose remote-based content on their Client tables.  "},{"title":"GetController​","type":1,"pageTitle":"KnitClient","url":"api/KnitClient#GetController","content":"&lt;/&gt; KnitClient.GetController(controllerName: string) → Controller Gets the controller by name. Throws an error if the controller is not found.  "},{"title":"Start​","type":1,"pageTitle":"KnitClient","url":"api/KnitClient#Start","content":"&lt;/&gt; KnitClient.Start(options: KnitOptions?) → Promise Starts Knit. Should only be called once per client. Knit.Start():andThen(function() print(&quot;Knit started!&quot;) end):catch(warn) By default, service methods exposed to the client will return promises. To change this behavior, set the ServicePromises option to false: Knit.Start({ServicePromises = false}):andThen(function() print(&quot;Knit started!&quot;) end):catch(warn)   "},{"title":"OnStart​","type":1,"pageTitle":"KnitClient","url":"api/KnitClient#OnStart","content":"&lt;/&gt; KnitClient.OnStart() → Promise Returns a promise that is resolved once Knit has started. This is useful for any code that needs to tie into Knit controllers but is not the script that called Start. Knit.OnStart():andThen(function() local MyController = Knit.GetController(&quot;MyController&quot;) MyController:DoSomething() end):catch(warn)  "},{"title":"KnitServer","type":0,"sectionRef":"#","url":"api/KnitServer","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"KnitServer","url":"api/KnitServer#types","content":" "},{"title":"Middleware​","type":1,"pageTitle":"KnitServer","url":"api/KnitServer#Middleware","content":"&lt;/&gt; interface Middleware { Inbound: ServerMiddleware? Outbound: ServerMiddleware? }   "},{"title":"ServerMiddlewareFn​","type":1,"pageTitle":"KnitServer","url":"api/KnitServer#ServerMiddlewareFn","content":"&lt;/&gt; type ServerMiddlewareFn = ( player: Player , args: {any} ) → ( shouldContinue: boolean, ...: any ) For more info, see ServerComm documentation.  "},{"title":"ServerMiddleware​","type":1,"pageTitle":"KnitServer","url":"api/KnitServer#ServerMiddleware","content":"&lt;/&gt; type ServerMiddleware = {ServerMiddlewareFn} An array of server middleware functions.  "},{"title":"ServiceDef​","type":1,"pageTitle":"KnitServer","url":"api/KnitServer#ServiceDef","content":"&lt;/&gt; interface ServiceDef { Name: string Client: table? Middleware: Middleware? [any]: any } Used to define a service when creating it in CreateService. The middleware tables provided will be used instead of the Knit-level middleware (if any). This allows fine-tuning each service's middleware. These can also be left out or nil to not include middleware.  "},{"title":"Service​","type":1,"pageTitle":"KnitServer","url":"api/KnitServer#Service","content":"&lt;/&gt; interface Service { Name: string Client: ServiceClient KnitComm: Comm [any]: any }   "},{"title":"ServiceClient​","type":1,"pageTitle":"KnitServer","url":"api/KnitServer#ServiceClient","content":"&lt;/&gt; interface ServiceClient { Server: Service [any]: any }   "},{"title":"KnitOptions​","type":1,"pageTitle":"KnitServer","url":"api/KnitServer#KnitOptions","content":"&lt;/&gt; interface KnitOptions { Middleware: Middleware? }  Middleware will apply to all services except ones that define their own middleware.  "},{"title":"Properties​","type":1,"pageTitle":"KnitServer","url":"api/KnitServer#properties","content":" "},{"title":"Util​","type":1,"pageTitle":"KnitServer","url":"api/KnitServer#Util","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; KnitServer.Util: Folder  References the Util folder. Should only be accessed when using Knit as a standalone module. If using Knit from Wally, modules should just be pulled in via Wally instead of relying on Knit's Util folder, as this folder only contains what is necessary for Knit to run in Wally mode. "},{"title":"Functions​","type":1,"pageTitle":"KnitServer","url":"api/KnitServer#functions","content":" "},{"title":"CreateService​","type":1,"pageTitle":"KnitServer","url":"api/KnitServer#CreateService","content":"&lt;/&gt; KnitServer.CreateService(serviceDef: ServiceDef) → Service Constructs a new service. caution Services must be created before calling Knit.Start(). -- Create a service local MyService = Knit.CreateService { Name = &quot;MyService&quot;, Client = {}, } -- Expose a ToAllCaps remote function to the clients function MyService.Client:ToAllCaps(player, msg) return msg:upper() end -- Knit will call KnitStart after all services have been initialized function MyService:KnitStart() print(&quot;MyService started&quot;) end -- Knit will call KnitInit when Knit is first started function MyService:KnitInit() print(&quot;MyService initialize&quot;) end   "},{"title":"AddServices​","type":1,"pageTitle":"KnitServer","url":"api/KnitServer#AddServices","content":"&lt;/&gt; KnitServer.AddServices(parent: Instance ) → {Service} Requires all the modules that are children of the given parent. This is an easy way to quickly load all services that might be in a folder. Knit.AddServices(somewhere.Services)   "},{"title":"AddServicesDeep​","type":1,"pageTitle":"KnitServer","url":"api/KnitServer#AddServicesDeep","content":"&lt;/&gt; KnitServer.AddServicesDeep(parent: Instance ) → {Service} Requires all the modules that are descendants of the given parent.  "},{"title":"GetService​","type":1,"pageTitle":"KnitServer","url":"api/KnitServer#GetService","content":"&lt;/&gt; KnitServer.GetService(serviceName: string) → Service Gets the service by name. Throws an error if the service is not found.  "},{"title":"CreateSignal​","type":1,"pageTitle":"KnitServer","url":"api/KnitServer#CreateSignal","content":"&lt;/&gt; KnitServer.CreateSignal() → SIGNAL_MARKER Returns a marker that will transform the current key into a RemoteSignal once the service is created. Should only be called within the Client table of a service. See RemoteSignal documentation for more info. local MyService = Knit.CreateService { Name = &quot;MyService&quot;, Client = { -- Create the signal marker, which will turn into a -- RemoteSignal when Knit.Start() is called: MySignal = Knit.CreateSignal(), }, } function MyService:KnitInit() -- Connect to the signal: self.Client.MySignal:Connect(function(player, ...) end) end   "},{"title":"CreateProperty​","type":1,"pageTitle":"KnitServer","url":"api/KnitServer#CreateProperty","content":"&lt;/&gt; KnitServer.CreateProperty(initialValue: any) → PROPERTY_MARKER Returns a marker that will transform the current key into a RemoteProperty once the service is created. Should only be called within the Client table of a service. An initial value can be passed along as well. RemoteProperties are great for replicating data to all of the clients. Different data can also be set per client. See RemoteProperty documentation for more info. local MyService = Knit.CreateService { Name = &quot;MyService&quot;, Client = { -- Create the property marker, which will turn into a -- RemoteProperty when Knit.Start() is called: MyProperty = Knit.CreateProperty(&quot;HelloWorld&quot;), }, } function MyService:KnitInit() -- Change the value of the property: self.Client.MyProperty:Set(&quot;HelloWorldAgain&quot;) end   "},{"title":"Start​","type":1,"pageTitle":"KnitServer","url":"api/KnitServer#Start","content":"&lt;/&gt; KnitServer.Start(options: KnitOptions?) → Promise Starts Knit. Should only be called once. Optionally, KnitOptions can be passed in order to set Knit's custom configurations. caution Be sure that all services have been created before calling Start. Services cannot be added later. Knit.Start():andThen(function() print(&quot;Knit started!&quot;) end):catch(warn) Example of Knit started with options: Knit.Start({ Middleware = { Inbound = { function(player, args) print(&quot;Player is giving following args to server:&quot;, args) return true end }, }, }):andThen(function() print(&quot;Knit started!&quot;) end):catch(warn)   "},{"title":"OnStart​","type":1,"pageTitle":"KnitServer","url":"api/KnitServer#OnStart","content":"&lt;/&gt; KnitServer.OnStart() → Promise Returns a promise that is resolved once Knit has started. This is useful for any code that needs to tie into Knit services but is not the script that called Start. Knit.OnStart():andThen(function() local MyService = Knit.Services.MyService MyService:DoSomething() end):catch(warn)  "}]